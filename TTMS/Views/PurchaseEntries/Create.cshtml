@model TTMS.Models.PurchaseEntryVM

<style>
    hr.style3 {
        border-top: 1px dashed #8c8b8b;
    }

</style>
<script>
    $(document).ready(function () {
        $('#myDataTable').dataTable({
        });

        $("#purchaseEntry_InvoiceChallanNo, #purchaseEntry_InvoiceDate").WaterMark();

        $("#ProductShorName, #ProductType, #Quantity, #CostPrice, #MRPPrice , #SalePrice").WaterMark();

    });

    $(document).ready(function () {
        $('.add-button').click(function (e) {
            // validate
            var department = $("#msg_id");
            var msg = "Please select Product";
            if ($('#ProductID').val() == "") {
                department.text(msg);
                e.preventDefault();
                return false;
            }
            else {
                department.text("");
            }
            var productID = $('#ProductID').val();
            //validate if product is already exist in table

           
            var count = $("tr.contacts-record").length + 1;
            var template = $('.contacts-record-template').clone();
            var productName = $('#ProductID').find('option:selected').text();
            var ProductType = $("#ProductType").val();
            var Quantity = $("#Quantity").val();
            var CostPrice = $("#CostPrice").val();
            var MRP = $("#MRPPrice").val();
            var SalePrice = $("#SalePrice").val();
            template.find('input[type=text]').val(null);
            template.find('input[type=checkbox]').prop('checked', false);
            $.each(template.find('#ProductID1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(productID);
            });
            $.each(template.find('#ProductName1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(productName);
            });
            $.each(template.find('#ProductType1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(ProductType);
            });
            $.each(template.find('#Quantity1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(Quantity);
            });
            $.each(template.find('#CostPrice1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(CostPrice);
            });
            $.each(template.find('#MRP1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(MRP);
            });
            $.each(template.find('#SalePrice1'), function () {
                var name = $(this).attr('name');
                name = name.replace('0', count);
                $(this).attr('name', name);
                $(this).val(SalePrice);
            });
            var total = parseFloat(Quantity) * parseFloat(CostPrice);
            $.each(template.find('#Total1'), function () {
                $(this).val(total.toFixed(2));
            });

            //caliculate total
            var $tblfootrows = $("#myDataTable tfoot tr");
            $tblfootrows.each(function () {
                var $tblfootrow = $(this);
                var gt = $tblfootrow.find('.grdtot').val();
                if (gt != undefined && gt != NaN && gt !== "") {
                    var grandtotal = parseFloat(gt) + parseFloat(total)
                    $tblfootrow.find('.grdtot').val(grandtotal.toFixed(2));
                }
                else
                    $tblfootrow.find('.grdtot').val(total.toFixed(2));
            });
            calculateGrandTotal(total);
            template.removeClass('contacts-record-template').addClass('contacts-record').show();

            // clear controls
            $('#ProductID').val(null);
            $("#ProductType").val(null);
            $("#ProductShorName").val(null);
            $("#Quantity").val(null);
            $('.display').append(template);
        });
    });

    jQuery(document).ready(function () {
        $("#ProductID").change(function () {
            var id = $('#ProductID').val();
            var ServiceUrl = "/PurchaseOrders/GetProdectDetails?id=" + id;
            var content = '';
            $.support.cors = true;
            $.ajax({
                type: 'GET',
                url: ServiceUrl,
                async: true,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                    alert("Error");
                },
                success: function (result, status) {
                    $('#ProductShorName').val(result[0].ShorName);
                    $('#ProductType').val(result[0].Price)
                }
            });
        });
    });
    jQuery(document).ready(function () {
        if ($('#purchaseOrder_PurchaseOrderNo').val() == "") {
            var ServiceUrl = "/PurchaseEntries/GetPurchaseEntryNo";
            var content = '';
            $.support.cors = true;
            $.ajax({
                type: 'GET',
                url: ServiceUrl,
                async: true,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                    alert("Error");
                },
                success: function (result, status) {
                    $('#purchaseOrder_PurchaseOrderNo').val(result);
                }
            });
        }
    });
    function validateSave() {
        var department = $("#msg_SupplierId");
        var msg = "Please select Supplier";
        var rowCount = $('#myDataTable tr').length;
        if ($('#purchaseOrder_SupplierID').val() == "") {
            department.text(msg);
            return false;
        }
        else if (rowCount == 2) {
            department.text("");
            alert("Plesae add Products");
            return false
        }
        else {
            department.text("");
            return true;
        }
    }
    $(document).ready(function () {
        calculateTotal();
    })
   
   function calculateTotal() {
        //$('.pnm, .price, .subtot, .grdtot').prop('readonly', true);
        var $tblrows = $("#myDataTable tbody tr");
        var grandtotal = 0;
        $tblrows.each(function () {
            var $tblrow = $(this);

                var qty = $tblrow.find(".qty").val();
                var price = $tblrow.find(".price").val();
                var subTotal = parseInt(qty, 10) * parseFloat(price);

                if (!isNaN(subTotal)) {

                    $tblrow.find('.subtot').val(subTotal.toFixed(2));

                    grandtotal = grandtotal + subTotal;
                    //$(".subtot").each(function () {
                    //    var stval = parseFloat($(this).val());
                    //    grandTotal += isNaN(stval) ? 0 : stval;
                    //});

                    //$('.grdtot').val(grandTotal.toFixed(2));
                }
        });

        var $tblfootrows = $("#myDataTable tfoot tr");
        $tblfootrows.each(function () {
            var $tblfootrow = $(this);
            var gt = $tblfootrow.find('.grdtot').val();
            if (gt != undefined)
                $tblfootrow.find('.grdtot').val(grandtotal.toFixed(2));
        });
        calculateGrandTotal(0);
    };

   function calculateGrandTotal(total)
   {
       var $tblfootrows = $("#myDataTable tfoot tr");
       var cgst = 0; var gst = 0; var sgst = 0;
       var discount = 0;
       var gtotal = 0;
       var ggTotal = 0;
       var i = 0;
       $tblfootrows.each(function () {
           var $tblfootrow = $(this);
           if (i == 0) gtotal = $tblfootrow.find('.grdtot').val();
           if (i == 1)  sgst = $tblfootrow.find('.sgst').val();
           if (i == 2)  cgst = $tblfootrow.find('.cgst').val();
           if (i == 3) discount = $tblfootrow.find('.discount').val();
           if (i == 4) {
               if (sgst != undefined && sgst != NaN && sgst != "" && sgst != 0) gst = parseInt(sgst);
               if (cgst != undefined && cgst != NaN && cgst != "" && cgst != 0) gst = gst + parseInt(cgst);
               if (total != undefined && total != 0)
                   gtotal = parseFloat(total);
               ggTotal = parseFloat(gtotal);
               if (gst != 0) ggTotal = parseFloat(gtotal) + parseFloat((gtotal / 100) * gst)
               if (discount != undefined && discount != NaN && discount != "" && discount != 0)
                   ggTotal = ggTotal - parseFloat((gtotal / 100) * parseInt(discount))

               if (ggTotal != undefined && ggTotal != NaN)
                   $tblfootrow.find('.grandgrdtot').val(ggTotal.toFixed(2));
           }
           i++;
       });
   }

   $(function () {
       $('body').on('click', '.modal-link', function (e) {
           e.preventDefault();
           $(this).attr('data-target', '#modal-container');
           $(this).attr('data-toggle', 'modal');
       });
       $('body').on('click', '.modal-close-btn', function () {
           $('#modal-container').modal('hide');
       });
       $('#modal-container').on('hidden.bs.modal', function () {
           $(this).removeData('bs.modal');
       });
       $('#CancelModal').on('click', function () {
           return false;
       });
   });
</script>
@using (Html.BeginForm("Create", "PurchaseEntries"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Purchase Entry</h4>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-6">
                <div>
                    @Html.HiddenFor(model => model.purchaseOrder.ID)
                </div>
                <div>@Html.HiddenFor(model => model.purchaseOrder.ID)</div>
                <div class="form-group">
                    <div class="col-md-4 control-label col-md-3">Purchase Entry No</div>
                    
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.purchaseOrder.PurchaseOrderNo, new { htmlAttributes = new { @class = "form-control  input-sm" } })
                        @Html.ValidationMessageFor(model => model.purchaseOrder.PurchaseOrderNo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <div class="col-md-4 control-label col-md-3">Supplier</div>
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.purchaseOrder.SupplierID, new SelectList(ViewBag.Suppliers, "ID", "OrganizationName"), "Select Supplier", htmlAttributes: new { @class = "form-control  input-sm" })
                        @Html.ValidationMessageFor(model => model.purchaseOrder.SupplierID, "", new { @class = "text-danger" })
                        <div style="color:red;" id="msg_SupplierId"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                @Html.DropDownListFor(model => model.purchaseEntry.InvoiceChallan, new SelectList(ViewBag.InvoiceChallan, "Text", "Value"), "Select Invoice/Challen", htmlAttributes: new { @class = "form-control  input-sm" })
                @Html.ValidationMessageFor(model => model.purchaseEntry.InvoiceChallan, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.purchaseEntry.InvoiceChallanNo, htmlAttributes: new { @class = "form-control  input-sm", title = "Invoice/Challen Number" })
                @Html.ValidationMessageFor(model => model.purchaseEntry.InvoiceChallanNo, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.purchaseEntry.InvoiceDate, htmlAttributes: new { @class = "form-control  input-sm", Title = "Invoice Date" })
                @Html.ValidationMessageFor(model => model.purchaseEntry.InvoiceDate, "", new { @class = "text-danger" })
            </div>
        </div>
        @{ 
            if (ViewBag.Edit == false)
            {         <h4>ADD PRODUCTS</h4>
                    <hr class="style3" />
                    <div></div>
                    <div class="row">
                        <div class="col-sm-3">
                            @Html.DropDownList("ProductID", null, "Select Product", htmlAttributes: new { @class = "form-control input-sm" })
                            <div style="color:red;" id="msg_id"></div>
                        </div>
                        <div class="col-sm-3">
                            @Html.TextBox("ProductShorName", null, htmlAttributes: new { @class = "form-control  input-sm", @readonly = true, title = "Short Name" })
                        </div>
                        <div class="col-sm-3">
                            @Html.TextBox("ProductType", null, htmlAttributes: new { @class = "form-control  input-sm", @readonly = true, title = " Product Type" })
                        </div>
                        <div class="col-sm-2">
                            @Html.TextBox("Quantity", null, htmlAttributes: new { @class = "form-control  input-sm", title = "Quantity" })
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-3">
                            @Html.TextBox("CostPrice", null, htmlAttributes: new { @class = "form-control  input-sm", title = "Cost Price" })
                        </div>
                        <div class="col-sm-3">
                            @Html.TextBox("MRPPrice", null, htmlAttributes: new { @class = "form-control  input-sm", title = "MRP" })
                        </div>
                        <div class="col-sm-3">
                            @Html.TextBox("SalePrice", null, htmlAttributes: new { @class = "form-control  input-sm", title = "Sale Price" })
                        </div>
                        <div class="col-sm-2">
                            <input type="button" id="addRow" value="Add" class="add-button" />
                        </div>
                    </div>
                }
            }
        <br />
        <table id="myDataTable" class="display">
            <thead>
                <tr>
                    <th style="display:none">ProductID</th>
                    <th>Product Name</th>
                    <th>Product Type</th>
                    <th>Quantity</th>
                    <th>Cost Price</th>
                    <th>MRP</th>
                    <th>Sale Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>

                @{
                    //To make unique Id
                    int i = 0;
                    foreach (var item in Model._orderDetail)
                    {
                        if (i == 0)
                        {
                            <tr class="contacts-record-template" style="display:none">
                                <td style="display:none">
                                    @Html.TextBoxFor(model => model._orderDetail[i].ID, new { @id = "ID1", @class = "form-control input-sm" })
                                </td>
                                <td style="display:none">
                                    @Html.TextBoxFor(model => model._orderDetail[i].ProductID, new { @id = "ProductID1", @class = "form-control input-sm" })
                                </td>
                                <td class="col-xs-2">
                                    @Html.TextBoxFor(model => model._orderDetail[i].ProductName, new { @id = "ProductName1", @class = "form-control input-sm" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].ProductType, new { @id = "ProductType1", @class = "form-control input-sm" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].Quantity, new { @id = "Quantity1", @class = "form-control input-sm qty", onchange = "calculateTotal()" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].CostPrice, new { @id = "CostPrice1", @class = "form-control input-sm price", onchange = "calculateTotal()" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].MRP, new { @id = "MRP1", @class = "form-control input-sm" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].SalePrice, new { @id = "SalePrice1", @class = "form-control input-sm" })
                                </td>
                                <td class="col-xs-2">
                                    <input type="text" id="Total1" class="form-control input-sm subtot" />
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr class="contacts-record">
                                <td style="display:none">
                                    @Html.TextBoxFor(model => model._orderDetail[i].ID, new { @id = "ID_" + i, @class = "form-control input-sm" })
                                </td>
                                <td style="display:none">
                                    @Html.TextBoxFor(model => model._orderDetail[i].ProductID, new { @id = "ProductID_" + i, @class = "form-control input-sm" })
                                </td>
                                <td class="col-xs-2">
                                    @Html.TextBoxFor(model => model._orderDetail[i].ProductName, new { @id = "ItemCode_" + i , @class = "form-control input-sm" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].ProductType, new { @id = "ProductName_" + i, @class = "form-control input-sm" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].Quantity, new { @id = "Qty_" + i, @class = "form-control input-sm qty", onchange = "calculateTotal()" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].CostPrice, new { @id = "CostPrice_" + i, @class = "form-control input-sm price", onchange = "calculateTotal()" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].MRP, new { @id = "MRP_" + i, @class = "form-control input-sm" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model._orderDetail[i].SalePrice, new { @id = "SalePrice_" + i, @class = "form-control input-sm" })
                                </td>
                                <td class="col-xs-2">
                                    <input type="text" id="Total_" class="form-control input-sm subtot" />
                                </td>
                            </tr>
                        }
                        i++;
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>Total :</th>
                    <th>
                        <input type="text" id="GrandTotal_" class="form-control input-sm grdtot" readonly />
                    </th>
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>SGST :</th>
                    <th class="col-xs-2">
                        @Html.EditorFor(model => model.purchaseEntry.SGST, new { htmlAttributes = new { @class = "sgst", onchange = "calculateGrandTotal(0)" } })
                    </th>
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>CGST :</th>
                    <th class="col-xs-2">
                        @Html.EditorFor(model => model.purchaseEntry.CGST, new { htmlAttributes = new { @class = "cgst", onchange = "calculateGrandTotal(0)" } })
                    </th>
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>Discount :</th>
                    <th class="col-xs-2">
                        @Html.EditorFor(model => model.purchaseEntry.DiscountAmount, new { htmlAttributes = new { @class = "discount", onchange = "calculateGrandTotal(0)" } })
                    </th>
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>Grand Total :</th>
                    <th class="col-xs-2">
                        <input type="text" id="GrandGrandTotal_" value="0.00" class="form-control input-sm grandgrdtot" readonly />
                    </th>
                </tr>
            </tfoot>
        </table>
        <br />
        @{ 
            if (ViewBag.Edit == true && ViewBag.PurchaseEntryID !=0 ) {
                if (ViewBag.NoDue == false)
                {
                    <div class="row">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.purchaseEntry.DueAmount, htmlAttributes: new { @class = "control-label col-sm-1" })
                        </div>
                        <div class="col-sm-2">
                               @Html.EditorFor(model => model.purchaseEntry.DueAmount, new { htmlAttributes = new { @class = "form-control  input-sm" } })
                               @Html.ValidationMessageFor(model => model.purchaseEntry.DueAmount, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-xs-2">
                            @Html.ActionLink("Pay", "Create", "PurchaseEntryPayments", new { iPurchaseEntryID = ViewBag.PurchaseEntryID }, new { @class = "modal-link btn btn-success" })
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <strong>Wow!</strong> No Amount is Due. @Html.ActionLink("View Payment History", "Index", "PurchaseEntryPayments")
                    </div>
                }
            }
        }
        <br />
        <div class="form-horizontal">
            <div class="col-md-5"></div>
            <div class="col-md-1">
                <input type="submit" value="Save" onclick="return validateSave()" class="btn btn-success" />
            </div>
            <div class="col-md-1">
                @Html.ActionLink("Cancel", "Index", null, htmlAttributes: new { @class = "btn btn-default" })
            </div>
        </div>
        
        <div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-content">
            </div>
        </div>
    </div>
}